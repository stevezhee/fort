;; types
Int  = /Signed 32
Bool = /Bool

;; primitives
== = equals
equals: (a, a) -> Bool

- = subtract
subtract: (a, a) -> a

* = multiply
multiply: (a, a) -> a

/ = divide
divide: (a, a) -> a

cast: a -> b
output: a -> ()

;; code
is-odd: Int -> Bool = cast

^ = powi

powi: (Int, Int) -> Int = \(x,y) => go (1,x,y)
  /where
    go: (Int, Int, Int) -> Int = \(r,a,b) => /if
      b == 0   = r
      is-odd b = go (r * a, a, b - 1)
      _        = go (r, a * a, b / 2)

squared: Int -> Int = powi (,2)
cubed: Int -> Int = powi (,3)
pow2: Int -> Int = powi (2,)

main: () -> Int = \_ => /do
  output (powi(128, 0))
  output (powi(3, 2))
  output (powi(2, 3))
  output (powi(128, 1))
  output (squared(3))
  output (cubed(2))
  output (pow2(8))
  0

