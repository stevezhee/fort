;; types
Int  = /signed 32
Bool = /bool

;; primitives
== = equals
equals: (Int, Int) -> Bool

- = subtract
subtract: (Int, Int) -> Int

* = multiply
multiply: (Int, Int) -> Int

/ = divide
divide: (Int, Int) -> Int

;; & = bitwise-and
;; bitwise-and: (Int, Int) -> Int

truncate: a -> b

;; code
is-odd: Int -> Bool = truncate

^ = powi
powi: (Int, Int) -> Int = \(x,y) => go (1,x,y) ;; BAL:
  /where
    go: (Int, Int, Int) -> Int = \(r,a,b) => /if
      b == 0   = r
      is-odd b = go (r * a, a, b - 1)
      _        = go (r, a * a, b / 2)

squared: Int -> Int = powi (,2)