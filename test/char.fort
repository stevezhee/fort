;; types
Char = /Char
Handle = /Address (/Unsigned 64)
String = /String
Int = /Signed 32
Bool = /Bool

;; primitives
stdin: Handle = /extern "g_stdin"
stdout: Handle
stderr: Handle = /extern "g_stderr"

h-get-char: Handle -> Char = /extern "fgetc"

output: a -> ()

greater-than: (a, a) -> Bool
> = greater-than

;; constants

a = #"a"
b: Char = #"b"
s: String = "hello, world"

;; functions

foo: Char -> Char = \_ => fst (#"z",#"a")
bar: Char -> Char = \_ => fst (a, b : Char)

get-char: () -> Char = \() => h-get-char stdin

io-test: () -> () = \w => /do
  output (get-char w)

hello-world: () -> () = \_ => /do
  output s
  output ("hi, again")

fst: (Char, Char) -> Char = \(x,_) => x

qux: Char -> Char = \_ => fst (c,d)
  /where
    c = #"c"
    d: Char = #"d"

main: (Int, /Address /String) -> Int = \(argc, argv) => /do
  hello-world ()
  output (foo #"a")
  output (qux #"a")
  /if
    argc > 1 = io-test ()
    _ = ()
  0