;; types
Char = /char
Handle = /address (/unsigned 32)
String = /string

;; primitives
stdin: Handle
stdout: Handle
stderr: Handle

h-get-char: Handle -> Char
h-put: (a, Handle) -> ()

;; constants

a = #"a"
b: Char = #"b"
s: String = "hello, world"

;; functions

foo: Char -> Char = \_ => fst (#"z",#"z")
bar: Char -> Char = \_ => fst (a,b : Char)
get-char: () -> Char = \() => h-get-char stdin
put-char: Char -> () = h-put (,stdout)

put-string: String -> () = h-put (,stdout)

char-io-test: () -> () = \w => /do
  put-char (get-char w)
  put-char #"!"

hello-world: () -> () = \_ => /do
  put-string (s)
  put-string ("hello, world")

fst: (Char, Char) -> Char = \(x,_) => x
qux: Char -> Char = \_ => fst (c,d)
  /where
    c = #"c"
    d: Char = #"d"
