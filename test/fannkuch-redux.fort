;; types
Int = /Unsigned 32 ;; BAL: make this signed
SInt = /Signed 32
Perm = /Address (/Array 12 Int) ;; BAL: make this configurable
Bool = /Bool

;; primitives
add: (a, a) -> a
+ = add
equals: (a, a) -> Bool
== = equals
greater-than: (a, a) -> Bool
> = greater-than
less-than: (a, a) -> Bool
< = less-than
output: a -> ()

subtract: (a, a) -> a
- = subtract

greater-than-or-equals: (a, a) -> Bool
>= = greater-than-or-equals

store: (/Address a, a) -> ()
:= = store

load: /Address a -> a
;; BAL: support unary operators @ = load

index: (/Address (/Array sz a), Int) -> /Address a
# = index

cast: a -> b

;; code
is-odd: Int -> Bool = cast

max: (Int, Int) -> Int = \(x, y) => /if
  x >= y = x
  _ = y

;; St = /Record
;;   max-flips: Int
;;   checksum: SInt
;;   perm-count: Int

;; BAL: try multiply version when benchmarking
calc-checksum: (SInt, Int, Int) -> SInt = \(csum, n-flips, i) => /if
  is-odd i = csum - cast n-flips
  _ = csum + cast n-flips
  
;; inc: /Address Int -> () = \p => p := (load p + 1)
dec: /Address Int -> () = \p => p := (load p - 1)

;; array: (Int -> a) -> /Address (/Array sz a)

alloca: /Address a

;; linear: Int -> Int = \i => i + 1 ;; BAL: inline
;; zeros: Int -> Int = \_ => 0 ;; BAL: inline

;; array-linear: /Address (/Array sz a) = /do
;; array-zeros: /Address (/Array sz a)

array-size: /Address (/Array sz a) -> Int

init-linear: Perm -> () = \arr => go 0
  /where
    go: Int -> () = \i => /if
      i < array-size arr = /do ;; BAL: go backwards?  use an input size?
        /let j = i + 1
        (arr # i) := j
        go j
      _ = ()

init-copy: (Perm, Perm) -> () = \(a, b) => go 0
  /where
    go: Int -> () = \i => /if ;; BAL: go backwards?  use an input size?
      i < array-size a = /do
        (a # i) := load (b # i)
        go (i + 1)
      _ = ()

permutations: Int -> Int = \n => /do
  /let perm: Perm = alloca
  /let count: Perm = alloca
  init-linear perm

  computePerms (n, 0, 0, 0)
    /where
      computePerms: (Int, Int, Int, SInt) -> Int = \(r0, idx, mx0, csum0) => /do
        ;; output perm
        /let nflips = num-flips perm
        ;; output nflips
        /let mx = max (mx0, nflips)
        ;; output "mx ="
        ;; output mx
        /let csum = calc-checksum(csum0, nflips, idx)
        ;; output "csum ="
        ;; output csum
        updateCounts r0
        /let r: Int = computeNextPerm 1
        /if
          r < n = computePerms (r, idx + 1, mx, csum)
          _ = /do
            output csum
            mx

      updateCounts: Int -> () = \r0 =>
        /if
          r0 > 1 = /do
            /let r: Int = r0 - 1
            (count # r) := r0
            updateCounts r
          _ = ()

      computeNextPerm: Int -> Int = \r => /do
        rotateSubPerm r
        dec (count # r)
        
        /if
          load (count # r) > 0 = r
          _ = computeNextPerm (r + 1)

      rotateSubPerm: Int -> () = \r => /do
        /let perm0 = load (perm # 0)
        rot 0
          /where
            rot: Int -> () = \i =>
              /if
                i < r = /do
                  (perm # i) := load (perm # (i + 1))
                  rot (i + 1)
                _ = (perm # r) := perm0

num-flips: Perm -> Int = \perm => /do
  /let arr: Perm = alloca 
  init-copy (arr, perm)
  go 0
    /where
      go: Int -> Int = \n => /case load (arr # 0) /of
        1 = n
        \i => /do
          reverse-n (i, arr)
          ;; output p
          go (n + 1)

reverse-n: (Int, Perm) -> () = \(n, arr) => go (0, n - 1)
  /where
    go: (Int, Int) -> () = \(l, r) => /if
      l >= r = ()
      _ = /do
        swap (arr # l, arr # r)
        go (l + 1, r - 1)

swap: (/Address Int, /Address Int) -> () = \(p, q) => /do
  /let temp = load p
  p := load q
  q := temp

test-perm: /Array 12 Int = /array ;; BAL: should be able to write on one line with {} and ;
  4
  2
  1
  5
  3
  0
  0
  0
  0
  0
  0
  0

atoi: /String -> Int = /extern "atoi"

main: (Int, /Address (/Array 2 /String)) -> Int = \(argc, argv) => /do
  /if
    argc > 1 = /do
      output (permutations (atoi (load (argv # 1))))
      0
    _ = /do
      /let linear: Perm = alloca
      init-linear linear
      output linear

      /let rev: Perm = alloca
      rev := test-perm
      output rev
      reverse-n (5, rev)
      output rev

      rev := test-perm
      output (num-flips rev)

      output (permutations 7)
      0