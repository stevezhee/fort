;; types
Int = /signed 32
Bool = /bool
Char = /char

;; primitives
load: /address a -> a
output: a -> ()

;; case expressions
;; integer
int-case: Int -> Int = \x => /case x /of
  42 = 0
  24 = x
  \_ => 1

;; character
char-case: Char -> Char = \x => /case x /of
  #"a" = #"b"
  \c => c

;; enum
Color = /enum
  Red
  Green
  Blue

enum-case: Color -> Color = \c => /case c /of
  Red = green
  Green = red
  \_ => blue

enum-foo: Color -> () = \c => /do
  output green
  output c ;; BAL: this is broken
  output (enum-case c)

;; variant
Either = /enum
  Left: Char
  Right: Int
  
either-case-0: /address Either -> Int = \x => /case x /of
  Left = \_ => 1
  Right = \_ => 2

either-case-1: /address Either -> Int = \x => /case x /of
  Left = \_ => 42
  Right = \b => load b

either-case: /address Either -> () = \x => /case x /of
  Left = \a => left (x, load a)
  Right = \b => right (x, load b)

;; ;; variant mixed
;; Optional = /enum
;;   None
;;   Some: Char

;; optional-case: /address Optional -> () = \x => /case x /of
;;   None = none x
;;   Some = \c => some (x, load c)

