;; types
Int = /Signed 32
Bool = /Bool
Char = /Char

;; primitives
load: /Address a -> a
output: a -> ()
greater-than-or-equals: (Int, Int) -> Bool
>= = greater-than-or-equals

;; case expressions
;; integer
int-case: Int -> Int = \x => /case x /of
  42 = 0
  24 = x
  \_ => 1

;; character
char-case: Char -> Char = \x => /case x /of
  #"a" = #"b"
  \c => c

;; enum
Color = /Enum
  Red
  Green
  Blue

enum-case: Color -> Color = \c => /case c /of
  Red = green
  Green = red
  \_ => blue

enum-foo: Color -> () = \c => /do
  output green
  output c
  output (enum-case c)
  output (enum-case blue)

;; variant
Either = /Enum
  Left: Char
  Right: Int
  
either-case-0: Either -> Int = \x => /case x /of
  Left  = \_ => 1
  Right = \_ => 2

either-case-1: Either -> Int = \x => /case x /of
  Left  = \_ => 42
  Right = \b => b

either-case: Either -> () = \x => /case x /of
  Left  = \a => output (left a)
  Right = \b => output (right b)

;; variant mixed
Optional = /Enum
  None
  Some: Char

optional-case: Optional -> () = \x => /case x /of
  None = /do
    output none
    output x
  Some = \c => /do
    output (some c)
    output x

foo: () -> () = \_ => /do
  either-case (left #"a")
  optional-case (some #"z")
  
main: () -> Int = \a => /do
  enum-foo red
  foo a ;; BAL: foo () should work(?)
  0