;; types
Int = /signed 32
Bool = /unsigned 1
Char = /char 8

;; primitives
load: /address a -> a

;; case expressions
;; integer
int-case: Int -> Int = \x => /case x /of
  42 = 0
  24 = x
  _ = \_ => 1 ;; BAL: should be \_ => 1

;; character
char-case: Char -> Char = \x => /case x /of
  #"a" = #"b"
  _ = \c => c

;; enum
Color = /variant
  Red
  Green
  Blue

enum-case: Color -> Color = \c => /case c /of
  Red = green
  Green = red
  _ = \_ => blue ;; BAL: should be \_ => blue

;; variant
Either = /variant
  Left: Char
  Right: Int

either-case: /address Either -> () = \x => /case x /of
  Left = \a => left (x, load a)
  Right = \b => right (x, load b)

;; variant mixed
Optional = /variant
  None
  Some: Char

optional-case: /address Optional -> () = \x => /case x /of
  None = none x
  Some = \c => some (x, load c)

