;; BAL: try all test suite with fastMath enabled

Int = /Signed 32
UInt = /Unsigned 32
Double = /Floating 64
Bool = /Bool

Body = /Record
  x: Double
  y: Double
  z: Double
  vx: Double
  vy: Double
  vz: Double
  mass: Double

Bodies = /Address (/Array 5 Body)

pi: Double = 3.141592653589793

solar-mass: Double = (4 * pi) * pi
days-per-year: Double = 365.24

init-bodies = /array
  sun
  jupiter
  saturn
  uranus
  neptune

sun = /record
  x = 0
  y = 0
  z = 0
  vx = 0
  vy = 0
  vz = 0
  mass = solar-mass

jupiter = /record
  x = 4.84143144246472090e+00
  y = -1.16032004402742839e+00
  z = -1.03622044471123109e-01
  vx = 1.66007664274403694e-03 * days-per-year
  vy = 7.69901118419740425e-03 * days-per-year
  vz = -6.90460016972063023e-05 * days-per-year
  mass = 9.54791938424326609e-04 * solar-mass

saturn = /record
  x = 8.34336671824457987e+00
  y = 4.12479856412430479e+00
  z = -4.03523417114321381e-01
  vx = -2.76742510726862411e-03 * days-per-year
  vy = 4.99852801234917238e-03 * days-per-year
  vz = 2.30417297573763929e-05 * days-per-year
  mass = 2.85885980666130812e-04 * solar-mass

uranus = /record
  x = 1.28943695621391310e+01
  y = -1.51111514016986312e+01
  z = -2.23307578892655734e-01
  vx = 2.96460137564761618e-03 * days-per-year
  vy = 2.37847173959480950e-03 * days-per-year
  vz = -2.96589568540237556e-05 * days-per-year
  mass = 4.36624404335156298e-05 * solar-mass

neptune = /record
  x = 1.53796971148509165e+01
  y = -2.59193146099879641e+01
  z = 1.79258772950371181e-01
  vx = 2.68067772490389322e-03 * days-per-year
  vy = 1.62824170038242295e-03 * days-per-year
  vz = -9.51592254519715870e-05 * days-per-year
  mass = 5.15138902046611451e-05 * solar-mass

index: (/Address (/Array sz a), UInt) -> /Address a
# = index

sqr: Double -> Double = \x => x * x

load : /Address a -> a

atoi: /String -> Int = /extern "atoi"
alloca: () -> /Address a
output: a -> ()
sqrt: a -> a

;; foo: Bodies -> () = \bodies => /do
;;   go 0
;;   /where
;;     go: UInt -> () = \i => /if
;;       i >= array-size bodies = ()
;;       _ = /do
;;         /let b = bodies # i
;;         output (load (x b))
;;         output (load (y b))
;;         output (load (z b))
;;         output (load (vx b))
;;         output (load (vy b))
;;         output (load (vz b))
;;         output (load (mass b))
;;         go (i + 1)

main: (Int, /Address (/Array 2 /String)) -> Int = \(argc, argv) => /do

  /let n = /if
    argc > 1 = atoi(load (argv # 1)) ;; BAL: should be error if no default on the if
    _ = 1000

  /let bodies = alloca ()
  bodies := init-bodies

  ;; output (energy bodies)
  offset-momentum bodies
  output (energy bodies)
  output "\n"
  advance-n (bodies, 0.01, n)
  output (energy bodies)
  output "\n"

  0

energy: Bodies -> Double = \bodies => /do
  go (0, 0)
  /where
    go: (UInt, Double) -> Double = \(i, e) => /if
      i < array-size bodies = /do
        /let temp = (sqr (load (vx body)) + sqr (load (vy body))) + sqr (load (vz body))
        /let e' = goJ(i + 1, e + (0.5 * (load (mass body) * temp)))
        go (i + 1, e')
        /where
          body = bodies # i
          goJ: (UInt, Double) -> Double = \(j, e) => /if
            j < array-size bodies = /do
              /let body2 = bodies # j
              /let dx = load (x body) - load (x body2)
              /let dy = load (y body) - load (y body2)
              /let dz = load (z body) - load (z body2)
              /let distance = sqrt((sqr dx + sqr dy) + sqr dz)
              goJ(j + 1, e - ((load (mass body) * load (mass body2)) / distance))
            _ = e
      _ = e

incN: (/Address Double, Double) -> () = \(p, x) => p := ((load p) + x)
+= = incN

decN: (/Address Double, Double) -> () = \(p, x) => p := ((load p) - x)
-= = decN

advance-n: (Bodies, Double, Int) -> () = \(bodies, dt, n) => /do
  go(0)
  /where
    go: Int -> () = \i => /if
      i < n = /do
        advance(bodies, dt)
        go(i + 1)
      _ = ()

advance: (Bodies, Double) -> () = \(bodies, dt) => /do
  go(0)
  goDone(0)
  /where
    go: UInt -> () = \i => /if
      i < array-size bodies = /do
        /let body = bodies # i
        /let i' = i + 1
        goJ i'
          /where
            goJ: UInt -> () = \j => /if
              j < array-size bodies = /do
                /let body2 = bodies # j
                /let dx = load (x body) - load (x body2)
                /let dy = load (y body) - load (y body2)
                /let dz = load (z body) - load (z body2)
                /let distanced = (sqr dx + sqr dy) + sqr dz
                /let distance = sqrt(distanced)
                /let mag = dt / (distanced * distance)
                /let mmag = load (mass body) * mag
                /let mmag2 = load (mass body2) * mag
                (vx body) -= (dx * mmag2)
                (vy body) -= (dy * mmag2)
                (vz body) -= (dz * mmag2)
                (vx body2) += (dx * mmag)
                (vy body2) += (dy * mmag)
                (vz body2) += (dz * mmag)
                goJ(j + 1)
              _ = ()
        go i'
      _ = ()
    goDone: UInt -> () = \i => /if
      i < array-size bodies = /do
        /let body = bodies # i
        (x body) += (dt * load (vx body))
        (y body) += (dt * load (vy body))
        (z body) += (dt * load (vz body))
        goDone(i + 1)
      _ = ()

array-size: /Address (/Array sz a) -> UInt ;; BAL: should be array-count

negate: Double -> Double = \x => 0 - x ;; until the fneg instr is supported in llvm haskell

offset_momentum: Bodies -> () = \bodies => /do
  go(0, 0, 0, 0)
  /where
    go: (UInt, Double, Double, Double) -> () = \(i, px, py, pz) => /if
      i < array-size bodies = /do
        /let body = bodies # i
        /let m = load (mass body)
        go(i + 1, px + (load (vx body) * m), py + (load (vy body) * m), pz + (load (vz body) * m))
      _ = /do
        /let body0 = bodies # 0
        (vx body0) := (f px)
        (vy body0) := (f py)
        (vz body0) := (f pz)
    f: Double -> Double = \a => negate (a / solar-mass)
      
store: (/Address a, a) -> ()
:= = store

add: (a, a) -> a
+ = add

subtract: (a, a) -> a
- = subtract

multiply: (a, a) -> a
* = multiply

divide: (a, a) -> a
/ = divide

remainder: (a, a) -> a
% = remainder

equals: (a, a) -> Bool
== = equals

greater-than: (a, a) -> Bool
> = greater-than

less-than: (a, a) -> Bool
< = less-than

less-than-or-equals: (a, a) -> Bool
<= = less-than-or-equals

greater-than-or-equals: (a, a) -> Bool
>= = greater-than-or-equals

shift-left: (a, a) -> a
<< = shift-left

bitwise-and: (a, a) -> a
& = bitwise-and

bitwise-or: (a, a) -> a
| = bitwise-or

cast: a -> b
