Int = /Unsigned 32
Bool = /Bool

Char = /Char
Double = /Floating 64

h-put-f64: (Double, Handle) -> () = /extern "h_put_f64"
fputc: (Char, Handle) -> () = /extern "fputc"
fputs: (/String, Handle) -> () = /extern "fputs"

Handle = /Address (/Unsigned 64)
stdout: Handle = /extern "g_stdout"

array-size: /Address (/Array sz a) -> Int

add: (a, a) -> a
+ = add
load: /Address a -> a
index: (/Address (/Array sz a), Int) -> /Address a
# = index
less-than: (a, a) -> Bool
< = less-than

debug: a -> ()

debug: Char -> () = \c => /do
  fputs ("#\"", stdout)
  fputc (c, stdout)
  fputs ("\"", stdout)

debug: /String -> () = \s => /do
  fputs ("\"", stdout)
  fputs (s, stdout)
  fputs ("\"", stdout)

debug: Double -> () = h-put-f64 (, stdout)

debug: /Address (/Array sz a) -> () = \arr => /do
  fputs ("{", stdout)
  go 0
  fputs (" }", stdout)
  /where
    go: Int -> () = \i => /if
      i < array-size arr = /do
        /let c = load (arr # i)
        fputs (" ;", stdout)
        debug c
        go (i + 1)
      _ = ()

arrv = /array
  #"a"
  #"b"

alloca: () -> /Address a
store: (/Address a, a) -> ()
:= = store

nl: () -> () = \_ => fputs ("\n", stdout)

main: () -> Int = \_ => /do
  debug (1.3: Double)
  nl ()
  debug #"c"
  nl ()
  /let arr = alloca ()
  arr := arrv
  debug arr
  nl ()
  debug "hi there"
  nl ()
  0








;;   output ("hi there", #"c")
;;   output "\n"