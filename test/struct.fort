;; types
Char = /Char
Int = /Signed 32
Int64 = /Signed 64

MyStruct = /Record
  x: Int
  y: Char
  z: Int64
  
MyStruct2 = /Record
  a: Int
  b: Int64

;; primitives

alloca: /Address a
load: /Address a -> a
store: (/Address a, a) -> ()
:= = store

output: a -> ()

;; code

get-y: /Address MyStruct -> Char = \mystr => load (y mystr)

;; set-x: (Int, /Address MyStruct) -> () = \(i, mystr) => store (x mystr) i

bar: /Address MyStruct -> () = \mystr => () ;; /set mystr
  ;; x = 24
  ;; y = #"a"

blah: /Address MyStruct2 -> () = \mystr2 => set-a(42, mystr2)

qux: MyStruct = /record
  x = 42
  y = #"z"
  z = 0xff

qux2: MyStruct2 = /record
  a = 11
  b = 0xdeadbeef

foo: () -> () = \_ => /do
  /let quxp = alloca
  store (quxp, qux)
  /let qux2p = alloca
  store (qux2p, qux2)
  output quxp
  output qux2p
  bar quxp
  blah qux2p
  output (load quxp)
  output (get-y quxp)

;; BAL: proposed syntax
;; baz: MyStruct -> MyStruct = /set
;;   x = 24
;;   z = -1
