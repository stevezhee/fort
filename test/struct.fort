;; types
Char = /char
Int = /signed 32
Int64 = /signed 64

MyStruct = /record
  x: Int
  y: Char
  z: Int64
  
MyStruct2 = /record
  a: Int
  b: Int64

;; primitives

store: (/address a, a) -> ()
:= = store

output: a -> ()

;; code

get-y: MyStruct -> Char = \mystr => y mystr

bar: MyStruct -> MyStruct = \mystr => set-x (24, set-y (#"a", mystr))

qux: MyStruct = {
  ; x = 42
  ; y = #"z"
  ; z = 0xff
  }

qux2: MyStruct2 = {
  ; a = 11
  ; b = 0xdeadbeef
  }

foo: () -> () = \_ => /do
  output qux
  output qux2
  output (bar qux)
  output (get-y (bar qux))

;; BAL: proposed syntax
;; baz: MyStruct -> MyStruct = /set
;;   x = 24
;;   z = -1

;; BAL: proposed syntax
;; qux2: MyStruct = /record
;;   x = 42
;;   y = #"z"
;;   z = 0xff
