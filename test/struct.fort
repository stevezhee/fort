;; types
Char = /char
Int = /signed 32
Int64 = /signed 64

MyStruct = /record
  x: Int
  y: Char
  z: Int64
  
MyStruct2 = /record
  a: Int
  b: Int64

;; primitives

store: (/address a, a) -> ()
:= = store

output: a -> ()

;; code
;; foo-struct: (/address MyStruct, /address MyStruct2) -> () = \(mystr, mystr2) => /do
  ;; x mystr := 42
  ;; y mystr := #"c"
  ;; z mystr := 42424242
  ;; output mystr
  ;; a mystr2 := 24
  ;; b mystr2 := 24242424
  ;; output mystr2

get-y: MyStruct -> Char = \mystr => y mystr

bar: MyStruct -> MyStruct = \mystr => set-x (24, set-y (#"a", mystr))

qux: MyStruct = {
  ; x = 42
  ; y = #"z"
  ; z = 0xff
  }

foo: () -> () = \_ => /do
  output qux
  output (get-y (bar qux))

;; baz: MyStruct -> MyStruct = /set
;;   x = 24
;;   z = -1

;; qux2: MyStruct = /record
;;   x = 42
;;   y = #"z"
;;   z = 0xff
