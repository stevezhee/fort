;; types
Int = /signed 32
Idx = /unsigned 32

;; primitives
* = multiply
multiply: (Int, Int) -> Int
+ = add
add: (a, a) -> a
>= = greater-than-or-equals
greater-than-or-equals: (a, a) -> /bool

load: /address a -> a
store: (/address a, a) -> ()

index: (/address (/array sz a), Idx) -> /address a ;; where a is a primitive type
output: a -> ()

;; code

foreach: /address (/array 42 Int) -> () = \arr => loop 0
  /where
    loop: Idx -> () = \i => /if
      i >= 42 = ()
      _ = /do
        output (index (arr, i))
        loop (i + 1)

foo-array: /address (/array 2 Int) -> () = \arr => /do
  store (index (arr, 0), 21)
  store (index (arr, 1), load (index (arr, 0)) * 2)
  output arr

foo-2dim-array: /address (/array 2 (/array 3 Int)) -> () = \arr => /do
  store (index (index (arr, 0), 0), 0)
  store (index (index (arr, 0), 1), 1)
  store (index (index (arr, 0), 2), 1)
  store (index (index (arr, 1), 0), 2)
  store (index (index (arr, 1), 1), 3)
  store (index (index (arr, 1), 2), 5)
  output arr

;; do array constants also... as long as the code evaluates to a constant at compile time then it's a constant