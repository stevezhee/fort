;; types
Int = /signed 32
Idx = /Unsigned 32

;; primitives
* = multiply
multiply: (Int, Int) -> Int
+ = add
add: (a, a) -> a
>= = greater-than-or-equals
greater-than-or-equals: (a, a) -> /bool

load: /Address a -> a
store: (/Address a, a) -> ()

index: (/Address (/Array sz a), Idx) -> /Address a ;; where a is a primitive type
output: a -> ()

;; code

foo-array: /Address (/Array 2 Int) -> () = \arr => /do
  store (index (arr, 0), 21)
  store (index (arr, 1), load (index (arr, 0)) * 2)
  output arr

foo-2dim-array: /Address (/Array 2 (/Array 3 Int)) -> () = \arr => /do
  store (index (index (arr, 0), 0), 0)
  store (index (index (arr, 0), 1), 1)
  store (index (index (arr, 0), 2), 1)
  store (index (index (arr, 1), 0), 2)
  store (index (index (arr, 1), 1), 3)
  store (index (index (arr, 1), 2), 5)
  output arr

;; BAL: do array constants also... as long as the code evaluates to a constant at compile time then it's a constant